events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'auth_status=$auth_status auth_user=$auth_user';
                   
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    # AuthGuard upstream
    upstream authguard {
        server authguard:8080;
    }
    
    # Backend upstream  
    upstream backend {
        server backend:80;
    }

    server {
        listen 80;
        server_name localhost;

        # Variables to capture auth response headers
        set $auth_user "";
        set $auth_email "";
        set $auth_provider "";
        set $auth_status "";

        #=== AUTH ENDPOINTS ===#
        
        # Firebase only authentication
        location = /auth-firebase {
            internal;
            proxy_pass http://authguard/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Auth-Providers "firebase";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # IP whitelist only authentication
        location = /auth-ip {
            internal;
            proxy_pass http://authguard/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Auth-Providers "ip_whitelist";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Multi-provider authentication (Firebase + IP)
        location = /auth-admin {
            internal;
            proxy_pass http://authguard/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Auth-Providers "firebase,ip_whitelist";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        #=== PUBLIC ENDPOINTS ===#
        
        # Health check (no auth required)
        location /health {
            proxy_pass http://authguard/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Metrics (no auth required, could be restricted)
        location /metrics {
            proxy_pass http://authguard:9090/metrics;
            proxy_set_header Host $host;
        }

        # Static welcome page
        location = / {
            root /usr/share/nginx/html;
            index index.html;
        }

        #=== PROTECTED ENDPOINTS ===#
        
        # Public API - Firebase authentication only
        location /api/ {
            auth_request /auth-firebase;
            
            # Capture auth response
            set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user_id;
            auth_request_set $auth_email $upstream_http_x_user_email;
            auth_request_set $auth_provider $upstream_http_x_user_provider;
            
            # Forward user info to backend
            proxy_set_header X-User-ID $auth_user;
            proxy_set_header X-User-Email $auth_email;
            proxy_set_header X-User-Provider $auth_provider;
            proxy_set_header X-Original-URI $request_uri;
            
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Protected endpoints - Firebase authentication
        location /protected {
            auth_request /auth-firebase;
            
            # Capture auth response
            set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user_id;
            auth_request_set $auth_email $upstream_http_x_user_email;
            auth_request_set $auth_provider $upstream_http_x_user_provider;
            
            # Forward user info to backend
            proxy_set_header X-User-ID $auth_user;
            proxy_set_header X-User-Email $auth_email;
            proxy_set_header X-User-Provider $auth_provider;
            proxy_set_header X-Original-URI $request_uri;
            
            proxy_pass http://backend/protected;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Internal endpoints - IP whitelist only
        location /internal {
            auth_request /auth-ip;
            
            # Capture auth response
            set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user_id;
            
            # Forward info to backend
            proxy_set_header X-User-ID $auth_user;
            proxy_set_header X-Auth-Type "ip_whitelist";
            proxy_set_header X-Original-URI $request_uri;
            
            proxy_pass http://backend/internal;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Admin endpoints - Multi-provider (Firebase + IP whitelist)  
        location /admin {
            auth_request /auth-admin;
            
            # Capture auth response
            set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user_id;
            auth_request_set $auth_email $upstream_http_x_user_email;
            auth_request_set $auth_provider $upstream_http_x_user_provider;
            
            # Forward user info to backend
            proxy_set_header X-User-ID $auth_user;
            proxy_set_header X-User-Email $auth_email;
            proxy_set_header X-User-Provider $auth_provider;
            proxy_set_header X-Auth-Type "multi";
            proxy_set_header X-Original-URI $request_uri;
            
            proxy_pass http://backend/admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Error pages for auth failures
        error_page 401 = @error401;
        error_page 403 = @error403;

        location @error401 {
            internal;
            default_type application/json;
            return 401 '{"error": "Authentication required", "code": "UNAUTHORIZED", "message": "Please provide valid authentication credentials"}';
        }

        location @error403 {
            internal;
            default_type application/json;
            return 403 '{"error": "Access forbidden", "code": "FORBIDDEN", "message": "You do not have permission to access this resource"}';
        }
    }
}